# Docker Compose for Local Development
# Complete stack with frontend, backend, database, Redis, and monitoring

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres
    environment:
      POSTGRES_USER: taskflow_user
      POSTGRES_PASSWORD: taskflow_password
      POSTGRES_DB: taskflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./app/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskflow_user -d taskflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Redis (for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - taskflow-network

  # Backend API
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: taskflow-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: taskflow_user
      DB_PASSWORD: taskflow_password
      JWT_SECRET: dev_secret_change_in_production
      CORS_ORIGIN: http://localhost:5173,http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./app/backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - taskflow-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000
    container_name: taskflow-frontend
    ports:
      - "5173:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - taskflow-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: taskflow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    networks:
      - taskflow-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: taskflow-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - taskflow-network
    restart: unless-stopped

  # Adminer (Database UI)
  adminer:
    image: adminer:latest
    container_name: taskflow-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - taskflow-network
    restart: unless-stopped

networks:
  taskflow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  prometheus_data:
  grafana_data:

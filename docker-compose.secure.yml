version: '3.8'

# Secure Production Docker Compose Configuration
# This configuration includes security hardening measures

services:
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres-secure
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Security: Disable trust authentication
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./app/database/security-schema.sql:/docker-entrypoint-initdb.d/02-security.sql:ro
    networks:
      - backend_network
    # Security: Run as non-root
    user: "postgres"
    # Security: Read-only root filesystem (except data volume)
    read_only: true
    tmpfs:
      - /tmp
      - /run/postgresql:uid=999,gid=999
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Security: Drop all capabilities, add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-secure
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --loglevel warning
      --protected-mode yes
      --rename-command FLUSHDB ""
      --rename-command FLUSHALL ""
      --rename-command CONFIG ""
    volumes:
      - redis_data:/data
    networks:
      - backend_network
    # Security: Run as non-root
    user: "redis"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
      # Security: Use BuildKit for better security
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: taskflow-backend-secure
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: "true"
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN}
    networks:
      - frontend_network
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Security: Run as non-root user (set in Dockerfile)
    # Security: Read-only root filesystem (except temp dirs)
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    # Security: AppArmor profile (optional, Linux only)
    # security_opt:
    #   - apparmor=docker-default
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        BUILDKIT_INLINE_CACHE: 1
    container_name: taskflow-frontend-secure
    restart: unless-stopped
    networks:
      - frontend_network
    # Security: Run as non-root
    user: "nginx"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Security: Drop all capabilities except NET_BIND_SERVICE for port 80
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETGID
      - SETUID
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus (monitoring) - production hardened
  prometheus:
    image: prom/prometheus:latest
    container_name: taskflow-prometheus-secure
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api=false'  # Security: Disable admin API
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - backend_network
    # Security: Run as non-root
    user: "nobody"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    ports:
      - "127.0.0.1:9090:9090"  # Bind to localhost only

  # Grafana (visualization) - production hardened
  grafana:
    image: grafana/grafana:latest
    container_name: taskflow-grafana-secure
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: ""
      GF_SERVER_ROOT_URL: https://grafana.yourdomain.com
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_CONTENT_SECURITY_POLICY: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_LOG_LEVEL: "warn"
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - backend_network
    # Security: Run as non-root
    user: "472"
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    ports:
      - "127.0.0.1:3001:3000"  # Bind to localhost only
    depends_on:
      - prometheus

networks:
  frontend_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: taskflow-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: taskflow-backend
    # Security: Internal network - no external access
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/taskflow/postgres
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Security Notes:
# 1. All containers run as non-root users
# 2. Read-only root filesystems where possible
# 3. Capabilities dropped and minimized
# 4. Resource limits enforced
# 5. Internal backend network isolated
# 6. Health checks configured
# 7. Security opt no-new-privileges enabled
# 8. Sensitive ports bound to localhost only
# 9. All secrets via environment variables
# 10. Regular security updates required

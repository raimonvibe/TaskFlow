# Main CI/CD Pipeline
# Runs on push to main branch - builds, tests, and optionally deploys

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:  # Allow manual trigger

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/taskflow

# Optimize workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job 1: Lint Code
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        working-directory: app/${{ matrix.component }}
        run: npm ci

      - name: Run linter
        working-directory: app/${{ matrix.component }}
        run: npm run lint

      - name: Check code formatting
        working-directory: app/${{ matrix.component }}
        run: npm run format -- --check

  # Job 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        component: [frontend, backend]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: taskflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        working-directory: app/${{ matrix.component }}
        run: npm ci

      - name: Run tests
        working-directory: app/${{ matrix.component }}
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: taskflow_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test_secret_key
        run: npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: app/${{ matrix.component }}/coverage/coverage-final.json
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
          fail_ci_if_error: false

  # Job 3: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit (Frontend)
        working-directory: app/frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run npm audit (Backend)
        working-directory: app/backend
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Run Trivy and save results
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'
        continue-on-error: true

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.json

  # Job 4: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./app/${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.API_URL || 'http://localhost:3000' }}

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}:latest
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Job 5: Deploy to Staging (Optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && false  # Set to true to enable
    environment:
      name: staging
      url: https://staging.taskflow.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your deployment commands here
          # Examples:
          # - kubectl apply -f kubernetes/
          # - helm upgrade taskflow ./charts/taskflow
          # - docker-compose -f docker-compose.prod.yml up -d

  # Job 6: Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && false  # Set to true to enable
    environment:
      name: production
      url: https://taskflow.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploy to production environment"
          # Add your production deployment commands here

  # Job 7: Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes in this Release
            - Docker images built and pushed
            - See commits for details

            ## Docker Images
            - `${{ env.IMAGE_PREFIX }}-frontend:latest`
            - `${{ env.IMAGE_PREFIX }}-backend:latest`

            ## Quick Start
            ```bash
            docker pull ${{ env.IMAGE_PREFIX }}-frontend:latest
            docker pull ${{ env.IMAGE_PREFIX }}-backend:latest
            ```
          draft: false
          prerelease: false

  # Job 8: Notify
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Pipeline completed!"
          echo "Status: ${{ job.status }}"
          # Add notification logic here (Slack, Discord, email, etc.)

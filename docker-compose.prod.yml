# Docker Compose for Production-like Testing
# Optimized builds without development tools

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-prod
    restart: always

  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: taskflow-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - taskflow-prod
    restart: always

  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL}
    container_name: taskflow-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - taskflow-prod
    restart: always

networks:
  taskflow-prod:
    driver: bridge

volumes:
  postgres_prod_data:
